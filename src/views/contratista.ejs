<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Solicitud de Contratistas</title>
  <script src="https://cdn.tailwindcss.com"></script> <!-- CDN de Tailwind CSS -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
</head>
<style>
  #contentMayor {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  body>div>.form1,
  #personasListado {
    height: 90vh;
  }
</style>

<body class="font-sans bg-gray-100">

  <!-- Contenedor principal, flex y 100vh -->
  <div class="min-h-screen flex flex-col md:flex-row" id="contentMayor">

    <!-- Sección del formulario -->
    <div class="flex-1 bg-white p-6 md:w-1/2 overflow-auto form1">
      <h1 class="text-center text-2xl font-bold mb-6">Solicitud de Ingreso</h1>

      <form id="formulario" method="POST" enctype="multipart/form-data" class="space-y-6">

        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">

          <!-- Información de la Empresa -->
          <div class="mb-4">
            <label for="empresa" class="block text-sm font-semibold text-gray-700">Empresa</label>
            <input type="text" name="empresa" id="empresa" class="mt-1 p-2 border border-gray-300 rounded-md w-full"
              value="<%= empresa %>" required readonly>
          </div>

          <div class="mb-4">
            <label for="nit" class="block text-sm font-semibold text-gray-700">NIT</label>
            <input type="number" name="nit" id="nit" class="mt-1 p-2 border border-gray-300 rounded-md w-full"
              value="<%= nit %>" required readonly>
          </div>

          <!-- Lugar -->
          <div class="mb-4">
            <label for="lugar" class="block text-sm font-semibold text-gray-700">Lugar</label>
            <input type="text" name="lugar" id="lugar" class="mt-1 p-2 border border-gray-300 rounded-md w-full"
              required>
          </div>

          <!-- Labor -->
          <div class="mb-4">
            <label for="labor" class="block text-sm font-semibold text-gray-700">Labor</label>
            <input type="text" name="labor" id="labor" class="mt-1 p-2 border border-gray-300 rounded-md w-full"
              required>
          </div>

        </div>

        <!-- Sección de colaboradores -->
        <div class="mb-6">
          <div class="text-lg font-semibold mb-3">Datos de Colaboradores</div>
          <div id="personas-container">
            <div class="person-group mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="remove-person w-4 h-4 text-red-500 cursor-pointer"
                xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 511.991 511.991">
                <path
                  d="M286.161,255.867L505.745,36.283c8.185-8.474,7.951-21.98-0.523-30.165c-8.267-7.985-21.375-7.985-29.642,0L255.995,225.702L36.411,6.118c-8.475-8.185-21.98-7.95-30.165,0.524c-7.985,8.267-7.985,21.374,0,29.641L225.83,255.867L6.246,475.451c-8.328,8.331-8.328,21.835,0,30.165l0,0c8.331,8.328,21.835,8.328,30.165,0l219.584-219.584l219.584,219.584c8.331,8.328,21.835,8.328,30.165,0l0,0c8.328-8.331,8.328-21.835,0-30.165L286.161,255.867z" />
              </svg>
              <input type="number" placeholder="Cédula del Colaborador" name="cedula[]"
                class="p-2 border border-gray-300 rounded-md w-full" required>
              <input type="text" placeholder="Nombre del colaborador" name="nombre[]"
                class="p-2 border border-gray-300 rounded-md w-full" required>
              <label for="foto" class="block">Seleccionar Foto</label>
              <input type="file" id="foto" name="foto[]" class="p-2 border border-gray-300 rounded-md w-full"
                accept="image/*" required>
              <span class="text-gray-500">Selecciona una foto del colaborador</span>

              <label for="cedulaFoto" class="block">Seleccionar Cédula </label>
              <input type="file" id="cedula" name="cedulaFoto[]" class="p-2 border border-gray-300 rounded-md w-full"
                accept="image/*" required>
              <span class="text-gray-500">Selecciona cédula del colaborador</span>

            </div>
          </div>

          <button type="button" id="add-person" class="btn btn-primary bg-blue-500 text-white p-2 rounded-md">Agregar
            Colaborador</button>
        </div>

        <!-- Documentos de Seguridad Social -->
        <div class="mb-6">
          <div class="text-lg font-semibold mb-3">Seguridad Social de Trabajadores</div>
          <label for="arl" class="block text-sm font-semibold text-gray-700">Documento ARL</label>
          <input type="file" name="arl" id="arl" class="mt-1 p-2 border border-gray-300 rounded-md w-full" required>

          <label for="pasocial" class="block text-sm font-semibold text-gray-700 mt-4">Planilla de Pago Seguridad
            Social</label>
          <input type="file" name="pasocial" id="pasocial" class="mt-1 p-2 border border-gray-300 rounded-md w-full"
            required>
        </div>

        <!-- Fechas de Obra -->
        <div class="mb-6">
          <div class="text-lg font-semibold mb-3">Fechas de Obra</div>

          <label for="inicio_obra" class="block text-sm font-semibold text-gray-700">Inicio de Obra</label>
          <input type="date" name="inicio_obra" id="inicio-obra" class="p-2 border border-gray-300 rounded-md w-full"
            required onchange="calcularDias()">

          <label for="fin_obra" class="block text-sm font-semibold text-gray-700 mt-4">Fin de Obra</label>
          <input type="date" name="fin_obra" id="fin-obra" class="p-2 border border-gray-300 rounded-md w-full" required
            onchange="calcularDias()">

          <label for="dias_trabajo" class="block text-sm font-semibold text-gray-700 mt-4">Días Solicitados para
            Trabajar</label>
          <input type="text" name="dias_trabajo" id="dias-trabajo" class="p-2 border border-gray-300 rounded-md w-full"
            readonly>
        </div>

        <div class="text-center">
          <button type="submit" id="submitButton" class="btn bg-green-500 text-white p-2 rounded-md">Enviar</button>
        </div>

      </form>
    </div>


    <div class="flex-1 bg-gray-50 p-6 overflow-auto" id="personasListado">
      <div class="text-lg font-semibold mb-6">Solicitudes Realizadas</div>
      <div class="list-group space-y-4">
        <% solicitudes.forEach(solicitud=> { %>
          <div class="list-group-item p-4 bg-white rounded-md shadow-md">
            <p>Empresa: <%= solicitud.empresa %>
            </p>
            <p>ID: <%= solicitud.id %>
            </p>
            <p>Inicio de Obra: <%= solicitud.inicio_obra %>
            </p>
            <p>Fin de Obra: <%= solicitud.fin_obra %>
            </p>
            <p>NIT: <%= solicitud.nit %>
            </p>
            <p>Lugar: <%= solicitud.lugar %>
            </p>
            <p>Labor: <%= solicitud.labor %>
            </p>
            <p>Estado:
              <% if (solicitud.estado_actual==='aprobado por sst' ) { %>
                <span class="estado text-yellow-500 font-semibold">Aprobado por SST</span>
                <% } else if (solicitud.estado_actual==='pendiente ingreso' ) { %>
                  <span class="estado text-yellow-500 font-semibold">Pendiente Ingreso</span>
                  <button class="btn btn-info text-white bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded-md text-xs"
                    id="verQR-<%= solicitud.id %>">Ver QR</button>
                  <button class="btn btn-danger text-white bg-red-600 hover:bg-red-700 py-2 px-4 rounded-md text-xs"
                    onclick="detenerLabor(<%= solicitud.id %>, this)">Detener Labor</button>
                  <% } else if (solicitud.estado_actual==='en labor' ) { %>
                    <span class="estado text-blue-500 font-semibold">En labor</span>
                    <button class="btn btn-danger text-white bg-red-600 hover:bg-red-700 py-2 px-4 rounded-md text-xs"
                      onclick="detenerLabor(<%= solicitud.id %>, this)">Detener Labor</button>
                    <button class="btn btn-info text-white bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded-md text-xs"
                      id="verQR-<%= solicitud.id %>">Ver QR</button>
                    <% } else if (solicitud.estado_actual==='labor detenida' ) { %>
                      <span class="estado text-gray-500 font-semibold">Labor detenida</span>
                      <% } else { %>
                        <span class="estado text-green-500 font-semibold">
                          <%= solicitud.estado_actual %>
                        </span>
                        <% } %>
            </p>
            <p>Comentario: <span class="text-muted text-sm">
                <%= solicitud.comentario %>
              </span></p>
          </div>
          <% }); %>
      </div>
    </div>




  </div>


  <!-- Modal Background -->
  <div id="modalVerQR" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex justify-center items-center">
    <!-- Modal Container -->
    <div class="bg-white w-11/12 sm:w-96 rounded-lg shadow-lg overflow-hidden">
      <!-- Modal Header -->
      <div class="px-6 py-4 flex justify-between items-center border-b border-gray-200">
        <h5 class="text-xl font-semibold text-gray-800" id="modalVerQRLabel">Ver Código QR</h5>
        <button type="button" class="text-gray-500 hover:text-gray-800" onclick="closeModal()">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Modal Body (QR Display) -->
      <div class="px-6 py-4">
        <div id="qr-container" class="text-center">
          <!-- Aquí se insertará dinámicamente el QR -->
        </div>
      </div>

      <!-- Modal Footer -->
      <div class="px-6 py-3 flex justify-end border-t border-gray-200">
        <button type="button" class="bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-600 focus:outline-none"
          onclick="closeModal()">Cerrar</button>
      </div>
    </div>
  </div>




  <script>
    // Función para detener la labor y actualizar el estado en la base de datos
    async function detenerLabor(solicitudId, button) {
      try {
        // Deshabilitar el botón inmediatamente para prevenir múltiples clics
        button.disabled = true;
        button.innerHTML = 'Procesando...'; // Cambiar el texto para mostrar que está en proceso

        // Hacer la solicitud PUT para detener la labor
        const response = await fetch(`/solicitudes/${solicitudId}/detener-labor`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (response.ok) {
          // Recargar la página para reflejar el nuevo estado
          document.location.reload();  // Recargamos la página para mostrar el cambio
        } else {
          // Si la respuesta es negativa, extraemos el mensaje de error y mostramos una alerta
          const errorData = await response.json();
          Swal.fire({
            icon: 'error',
            title: 'Error al detener la labor',
            text: errorData.message || 'No se pudo detener la labor. Verifica que la solicitud esté en estado "en labor".',
          });
        }
      } catch (err) {
        // Si hay un error de red, mostramos una alerta genérica
        Swal.fire({
          icon: 'error',
          title: 'Error de conexión',
          text: 'Ocurrió un error al intentar detener la labor. Inténtalo nuevamente más tarde.',
        });
        console.error('Error al intentar detener la labor:', err);
      } finally {
        // Rehabilitar el botón después de procesar la solicitud
        button.disabled = false;
        button.innerHTML = 'Detener Labor';  // Restaurar el texto original
      }
    }

    // Función para agregar más campos de personas
    document.getElementById('add-person').addEventListener('click', function () {
      const personasContainer = document.getElementById('personas-container');
      const newPersonGroup = document.createElement('div');

      // Asignar las clases que coincidan con el HTML original
      newPersonGroup.classList.add('person-group', 'mb-4');

      // Agregar el contenido HTML con las mismas clases y estructura
      newPersonGroup.innerHTML = `
    <svg xmlns="http://www.w3.org/2000/svg" class="remove-person w-4 h-4 text-red-500 cursor-pointer"
                xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 511.991 511.991">
                <path
                  d="M286.161,255.867L505.745,36.283c8.185-8.474,7.951-21.98-0.523-30.165c-8.267-7.985-21.375-7.985-29.642,0L255.995,225.702L36.411,6.118c-8.475-8.185-21.98-7.95-30.165,0.524c-7.985,8.267-7.985,21.374,0,29.641L225.83,255.867L6.246,475.451c-8.328,8.331-8.328,21.835,0,30.165l0,0c8.331,8.328,21.835,8.328,30.165,0l219.584-219.584l219.584,219.584c8.331,8.328,21.835,8.328,30.165,0l0,0c8.328-8.331,8.328-21.835,0-30.165L286.161,255.867z" />
              </svg>
              <input type="number" placeholder="Cédula del Colaborador" name="cedula[]"
                class="p-2 border border-gray-300 rounded-md w-full" required>
              <input type="text" placeholder="Nombre del colaborador" name="nombre[]"
                class="p-2 border border-gray-300 rounded-md w-full" required>
              <label for="foto" class="block">Seleccionar Foto</label>
              <input type="file" id="foto" name="foto[]" class="p-2 border border-gray-300 rounded-md w-full"
                accept="image/*" required>
              <span class="text-gray-500">Selecciona una foto del colaborador</span>

              <label for="cedulaFoto" class="block">Seleccionar Cédula </label>
              <input type="file" id="cedula" name="cedulaFoto[]" class="p-2 border border-gray-300 rounded-md w-full"
                accept="image/*" required>
              <span class="text-gray-500">Selecciona cédula del colaborador</span>

  `;

      // Añadir el nuevo grupo de persona al contenedor
      personasContainer.appendChild(newPersonGroup);

      // Agregar evento al botón de eliminar (eliminar el grupo de persona)
      const removeButton = newPersonGroup.querySelector('.remove-person');
      removeButton.addEventListener('click', function () {
        newPersonGroup.remove();
      });
    });

    // Función para calcular los días entre el inicio y el final de la obra
    function calcularDias() {
      const inicioObra = document.getElementById('inicio-obra').value;
      const finObra = document.getElementById('fin-obra').value;
      const diasTrabajoInput = document.getElementById('dias-trabajo');

      if (inicioObra && finObra) {
        const fechaInicio = new Date(inicioObra);
        const fechaFin = new Date(finObra);
        const diferencia = Math.ceil((fechaFin - fechaInicio) / (1000 * 3600 * 24)) + 1; // Diferencia en días
        diasTrabajoInput.value = diferencia >= 0 ? diferencia : 'Fecha de fin no válida';
      }
    }

    // Manejador del evento de submit para evitar envíos múltiples
    document.getElementById('formulario').addEventListener('submit', async function (event) {
      event.preventDefault(); // Previene el comportamiento por defecto del formulario (enviar)

      const submitButton = document.getElementById('submitButton');
      submitButton.disabled = true; // Deshabilitar el botón para prevenir un segundo clic

      // Mostrar una advertencia al usuario
      submitButton.innerHTML = 'Enviando...';
 

       

      const formData = new FormData(this);
      formData.forEach((value, key) => {
      console.log(key, value);  
      });


      // Log de los datos para verificar
      console.log("Datos del formulario a enviar:", formData);
      for (const [key, value] of formData.entries()) {
        console.log(`${key}: ${value}`);
      }

      // Enviar los datos al servidor
      try {
        const response = await fetch('/generar-solicitud', { 
          method: 'POST',
          body: formData
        });

        // Verificar si la solicitud fue exitosa
        if (response.ok) {
          swal('Solicitud enviada correctamente');
        } else {
          swal('Error al enviar la solicitud');
        }
      } catch (error) {
        console.error('Error al enviar la solicitud:', error);
        swal('Error de conexión');
      } finally {
        // Reactivar el botón de submit en caso de que falle la solicitud
        submitButton.disabled = false;
        submitButton.innerHTML = 'Enviar';
        document.getElementById('formulario').reset();
      }
    });


    // Seleccionar todos los botones "Ver QR"
    const verQRBtns = document.querySelectorAll('[id^="verQR-"]');

    // Agregar el evento de clic a cada uno de los botones
    verQRBtns.forEach(btn => {
      btn.addEventListener('click', async function () {
        const solicitudId = this.id.replace('verQR-', ''); // Extraer el solicitud_id

        try {
          const response = await fetch(`/generar-qr/${solicitudId}`);
          const qrData = await response.json(); // Asegurarse de recibir JSON

          if (response.ok) {
            // Si la respuesta es correcta y se generó el QR
            const qrContainer = document.getElementById('qr-container');

            // Verificamos si el contenedor existe antes de intentar modificarlo
            if (qrContainer) {
              qrContainer.innerHTML = `<img src="${qrData.qrUrl}" alt="QR Code" class="mx-auto rounded-lg">`;
              openModal(); // Mostrar el modal solo si el QR se generó correctamente
            } else {
              console.error('Contenedor QR no encontrado.');
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Error al cargar el contenedor para el código QR.'
              });
            }
          } else {
            // Manejar mensajes específicos según el contenido del mensaje
            if (qrData.message.includes('vencida')) {
              Swal.fire({
                icon: 'warning',
                title: 'Solicitud Vencida',
                text: 'La solicitud está vencida, no se puede generar el QR.'
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: qrData.message || 'No se pudo obtener el QR para esta solicitud.'
              });
            }
          }
        } catch (error) {
          console.error('Error al obtener el QR:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al obtener el QR.'
          });
        }
      });
    });

    // Función para abrir el modal
    function openModal() {
      document.getElementById('modalVerQR').classList.remove('hidden');
    }

    // Función para cerrar el modal
    function closeModal() {
      document.getElementById('modalVerQR').classList.add('hidden');
    }


  </script>
  <!-- Enlace a los archivos JS de Bootstrap -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
</body>

</html>