<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seguridad</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        video { display: flex; justify-content: center; }
        .ocultar { display: none; }
        #advertencia { color: #ff0000; }
        .colaborador-checkbox { height: 20px; width: 20px; }
    </style>
</head>
<body>
    <!-- Barra de navegación -->
    <nav class="flex justify-between items-center bg-gray-800 text-white p-4">
        <a class="text-lg font-semibold" href="#">Vista Seguridad GA - <%= username %></a>
        <a class="text-lg" href="/logout">Cerrar sesión</a>
    </nav>

    <div class="container mt-5">
        <!-- Buscador y Botón Escanear QR -->
        <div class="mb-4 d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <input type="text" id="buscarId" class="form-control me-3 w-50 w-md-25" placeholder="Buscar por ID">
                <button class="btn btn-primary" onclick="buscar()">Buscar</button>
            </div>
            <button class="btn btn-secondary ocultar" onclick="escanearQR()">Escanear QR</button>
        </div>

        <!-- 
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-hover shadow-sm rounded">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Empresa</th>
                        <th>NIT</th>
                        <th>Estado</th>
                        <th>Interventor</th>
                        <th>Ver Detalles</th>
                    </tr>
                </thead>
                <tbody>
                    <% solicitud.forEach((sol) => { %>
                        <tr>
                            <td><%= sol.id %></td>
                            <td><%= sol.empresa %></td>
                            <td><%= sol.nit %></td>
                            <td>
                                <span class="badge <%= getEstadoClass(sol.estado_actual) %>">
                                    <%= sol.estado_actual %>
                                </span>
                            </td>
                            <td><%= sol.interventor %></td>
                            <td>
                                <button class="btn btn-info btn-sm" onclick="verDetalles(<%= sol.id %>)">
                                    <i class="bi bi-eye"></i> Ver Detalles
                                </button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
       Tabla única --> 
    </div>



    <!-- Modal de Confirmación para Entrada/Salida -->
    <div id="confirmacionModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden" style="z-index: 10000">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md mx-4">
            <div class="px-6 py-4 border-b flex justify-between items-center">
                <h5 class="text-lg font-semibold">Confirmar Registro</h5>
                <button id="cerrarModal" class="text-gray-500 hover:text-gray-700">×</button>
            </div>
            <div class="p-6">
                <p id="confirmacionTexto" class="text-gray-700"></p>
                <ul id="listaColaboradoresConfirmacion" class="mt-2 text-gray-600 list-disc pl-5"></ul>
                <div class="mt-4">
                    <label for="fechaRegistro" class="form-label">Fecha de Registro:</label>
                    <input type="datetime-local" id="fechaRegistro" class="form-control w-full" required>
                </div>
            </div>
            <div class="px-6 py-4 border-t flex justify-end space-x-3">
                <button id="cancelarBtn" class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded">Cancelar</button>
                <button id="confirmarRegistroBtn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded">Confirmar</button>
            </div>
        </div>
    </div>

    <!-- Modal para Ver Detalles -->
    <div class="modal fade" id="detallesModal" tabindex="-1" aria-labelledby="detallesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detallesModalLabel">Detalles de la Solicitud</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12 col-md-6">
                            <p><strong>Id de la solicitud:</strong> <span id="detalleId"></span></p>
                            <p><strong>Empresa:</strong> <span id="detalleEmpresa"></span></p>
                            <p><strong>Lugar:</strong> <span id="detalleLugar"></span></p>
                        </div>
                        <div class="col-12 col-md-6">
                            <p><strong>Labor:</strong> <span id="detalleLabor"></span></p>
                            <p><strong>Inicio de Obra:</strong> <span id="detalleInicio"></span></p>
                            <p><strong>Fin de Obra:</strong> <span id="detalleFin"></span></p>
                            <p><strong>Estado:</strong> <span id="detalleEstado"></span></p>
                            <p><strong>Interventor:</strong> <span id="detalleInterventor"></span></p>
                            <p><span id="advertencia"></span></p>
                        </div>
                    </div>
                    <h5 class="mt-4">Colaboradores</h5>
                    <div id="detalleColaboradores" class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-3"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" id="registrarIngresoBtn">Registrar Ingreso</button>
                    <button type="button" class="btn btn-success" id="registrarEntradaBtn">Registrar Entrada</button>
                    <button type="button" class="btn btn-danger" id="registrarSalidaBtn">Registrar Salida</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let modalData = null;
        const estadosVencidos = ['en labor - vencida', 'labor detenida', 'pendiente ingreso - vencido', 'en labor - vencida'];

        // Función para obtener la clase del estado
        function getEstadoClass(estado) {
            if (estado.includes('pendiente ingreso')) return 'bg-warning';
            if (estado.includes('vencida')) return 'bg-danger';
            if (estado === 'en labor') return 'bg-info';
            if (estado === 'labor detenida') return 'bg-secondary';
            return 'bg-success';
        }

        // Función para formatear fechas
        function formatFecha(fecha) {
            if (!fecha) return 'N/A';
            const date = new Date(fecha);
            return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
        }

        // Función para llenar el modal
        function llenarModal(data) {
            modalData = data;
            document.getElementById('detalleId').textContent = data.id || 'N/A';
            document.getElementById('detalleEmpresa').textContent = data.empresa || 'N/A';
            document.getElementById('detalleLugar').textContent = data.lugar || 'N/A';
            document.getElementById('detalleLabor').textContent = data.labor || 'N/A';
            document.getElementById('detalleInterventor').textContent = data.interventor || 'N/A';
            document.getElementById('detalleInicio').textContent = formatFecha(data.inicio_obra);
            document.getElementById('detalleFin').textContent = formatFecha(data.fin_obra);
            document.getElementById('advertencia').textContent = data.advertencia || '';

            const estadoElement = document.getElementById('detalleEstado');
            estadoElement.textContent = data.estado_actual || 'Desconocido';
            estadoElement.className = 'badge ' + getEstadoClass(data.estado_actual);

            const colaboradoresContainer = document.getElementById('detalleColaboradores');
            colaboradoresContainer.innerHTML = '';
            if (data.colaboradores && data.colaboradores.length > 0) {
                data.colaboradores.forEach((col) => {
                    const colDiv = document.createElement('div');
                    colDiv.classList.add('col-md-4', 'mb-3');
                    colDiv.innerHTML = `
                        <div class="card">
                            <img src="${col.foto}" class="card-img-top" alt="Foto de ${col.nombre}">
                            <div class="card-body">
                                <h6 class="card-title">${col.nombre}</h6>
                                <p class="card-text">Cédula: ${col.cedula}</p>
                                <p class="card-text">ID Colaborador: ${col.id}</p>
                                <input type="checkbox" class="colaborador-checkbox" value="${col.id}">
                            </div>
                        </div>
                    `;
                    colaboradoresContainer.appendChild(colDiv);
                });
            } else {
                colaboradoresContainer.innerHTML = '<p>No hay colaboradores disponibles.</p>';
            }

            configurarBotones(data);
            const modal = new bootstrap.Modal(document.getElementById('detallesModal'));
            modal.show();
        }

        // Función para configurar botones
        function configurarBotones(data) {
            const registrarIngresoBtn = document.getElementById('registrarIngresoBtn');
            const registrarEntradaBtn = document.getElementById('registrarEntradaBtn');
            const registrarSalidaBtn = document.getElementById('registrarSalidaBtn');

            if (estadosVencidos.includes(data.estado_actual) || data.advertencia || data.estado_actual === 'en labor') {
                registrarIngresoBtn.disabled = true;
                registrarIngresoBtn.classList.add('btn-secondary');
                registrarIngresoBtn.classList.remove('btn-primary');
                registrarIngresoBtn.textContent = 'No disponible';
            } else {
                registrarIngresoBtn.disabled = false;
                registrarIngresoBtn.classList.remove('btn-secondary');
                registrarIngresoBtn.classList.add('btn-primary');
                registrarIngresoBtn.textContent = 'Registrar Ingreso';
                registrarIngresoBtn.onclick = async () => {
                    try {
                        const response = await fetch(`/api/solicitudes/${data.id}/registrar-ingreso`, { method: 'PUT' });
                        if (response.ok) {
                            Swal.fire({ icon: 'success', title: 'Ingreso registrado', text: 'El ingreso se ha registrado correctamente.' });
                            registrarIngresoBtn.disabled = true;
                            registrarIngresoBtn.textContent = 'Registrado';
                        } else {
                            const errorData = await response.json();
                            Swal.fire({ icon: 'error', title: 'Error', text: errorData.message || 'No se pudo registrar el ingreso.' });
                        }
                    } catch (err) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'Ocurrió un error al intentar registrar el ingreso.' });
                    }
                };
            }

            if (data.advertencia || estadosVencidos.includes(data.estado_actual)) {
                registrarSalidaBtn.disabled = true;
                registrarSalidaBtn.textContent = 'No disponible';
                registrarSalidaBtn.classList.add('btn-secondary');
                registrarSalidaBtn.classList.remove('btn-primary');

                registrarEntradaBtn.disabled = true;
                registrarEntradaBtn.textContent = 'No disponible';
                registrarEntradaBtn.classList.add('btn-secondary');
                registrarEntradaBtn.classList.remove('btn-primary');
            } else {
                registrarSalidaBtn.disabled = false;
                registrarSalidaBtn.textContent = 'Registrar Salida';
                registrarSalidaBtn.classList.remove('btn-secondary');
                registrarSalidaBtn.classList.add('btn-primary');

                registrarEntradaBtn.disabled = false;
                registrarEntradaBtn.textContent = 'Registrar Entrada';
                registrarEntradaBtn.classList.remove('btn-secondary');
                registrarEntradaBtn.classList.add('btn-primary');
            }
        }

        // Cargar datos iniciales
        document.addEventListener('DOMContentLoaded', () => {
            const initialData = <%- JSON.stringify(typeof modalData !== 'undefined' ? modalData : null) %>;
            if (initialData) {
                llenarModal(initialData);
            }
        });

        // Ver detalles
        async function verDetalles(id) {
            try {
                const response = await fetch(`/api/solicitudes/${id}`);
                if (!response.ok) {
                    Swal.fire({ icon: 'error', title: 'Solicitud no encontrada', text: 'El colaborador no tiene una solicitud asignada o está pendiente de aprobación.' });
                    return;
                }
                const data = await response.json();
                llenarModal(data);
            } catch (error) {
                Swal.fire({ icon: 'error', title: 'Error', text: 'Ocurrió un error al obtener los detalles de la solicitud.' });
                console.error(error);
            }
        }

        function buscar() {
            const id = document.getElementById('buscarId').value;
            if (id) verDetalles(id);
            else alert('Por favor, ingrese un ID válido.');
        }

        // Lógica del modal de confirmación
        let tipoRegistro = '';
        let colaboradoresSeleccionados = [];

        document.addEventListener('DOMContentLoaded', () => {
            const modal = document.getElementById('confirmacionModal');
            const cerrarModal = document.getElementById('cerrarModal');
            const cancelarBtn = document.getElementById('cancelarBtn');
            const confirmarRegistroBtn = document.getElementById('confirmarRegistroBtn');

            cerrarModal.addEventListener('click', () => modal.classList.add('hidden'));
            cancelarBtn.addEventListener('click', () => modal.classList.add('hidden'));

            window.mostrarConfirmacionModal = function(tipo) {
                tipoRegistro = tipo;
                const checkboxes = document.querySelectorAll('.colaborador-checkbox:checked');
                if (!checkboxes.length) {
                    Swal.fire({ icon: 'warning', title: 'Selecciona colaboradores', text: `Debes seleccionar al menos un colaborador para registrar su ${tipo}.` });
                    return;
                }

                colaboradoresSeleccionados = Array.from(checkboxes).map(checkbox => {
                    const cardBody = checkbox.closest('.card-body');
                    return {
                        id: checkbox.value.trim(),
                        nombre: cardBody.querySelector('.card-title').textContent.trim(),
                        cedula: cardBody.querySelector('.card-text').textContent.replace('Cédula: ', '').trim()
                    };
                });

                document.getElementById('listaColaboradoresConfirmacion').innerHTML = colaboradoresSeleccionados
                    .map(col => `<li>${col.nombre} - C.C ${col.cedula}</li>`)
                    .join('');
                document.getElementById('confirmacionTexto').textContent = `¿Estás seguro de registrar la ${tipo} de los siguientes colaboradores?`;
                modal.classList.remove('hidden');
            };

            document.getElementById('registrarEntradaBtn').onclick = () => mostrarConfirmacionModal('entrada');
            document.getElementById('registrarSalidaBtn').onclick = () => mostrarConfirmacionModal('salida');

            confirmarRegistroBtn.addEventListener('click', async () => {
                const fechaRegistro = document.getElementById('fechaRegistro').value;
                const solicitudId = document.getElementById('detalleId').textContent;
                const detalleEstado = document.getElementById('detalleEstado').textContent;

                if (!colaboradoresSeleccionados.length) {
                    Swal.fire({ icon: 'warning', title: 'Colaboradores no seleccionados', text: 'Debes seleccionar al menos un colaborador.' });
                    return;
                }
                if (!fechaRegistro) {
                    Swal.fire({ icon: 'warning', title: 'Fecha requerida', text: 'Por favor, ingresa la fecha de registro.' });
                    return;
                }

                try {
                    const response = await fetch(`/api/solicitudes/${solicitudId}/registrar-${tipoRegistro}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ estado_actual: detalleEstado, solicitudId, colaboradores: colaboradoresSeleccionados, fecha: fechaRegistro })
                    });

                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire({ icon: 'success', title: 'Registro exitoso', text: result.message });
                        document.querySelectorAll('.colaborador-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                        modal.classList.add('hidden');
                    } else {
                        Swal.fire({ icon: 'error', title: 'Error', text: result.message });
                    }
                } catch (error) {
                    Swal.fire({ icon: 'error', title: 'Error', text: 'Hubo un problema al registrar la operación.' });
                    console.error('Error al registrar:', error);
                }
            });
        });

        // Escanear QR (sin cambios, pero podría modularizarse si se repite en otro lugar)
        function escanearQR() {
            const overlay = document.createElement('div');
            overlay.style.position = 'fixed';
            overlay.style.top = 0;
            overlay.style.left = 0;
            overlay.style.width = '100%';
            overlay.style.height = '100%';
            overlay.style.background = 'rgba(0, 0, 0, 0.8)';
            overlay.style.zIndex = 1000;

            overlay.innerHTML = `
                <div style="position: relative; width: 100%; max-width: 400px; margin: auto; height: auto; aspect-ratio: 3/4; border-radius: 10px; overflow: hidden; background-color: #000;">
                    <video id="cameraVideo" style="width: 100%; height: 100%;" playsinline></video>
                    <div style="position: absolute; bottom: 10px; width: 100%; display: flex; justify-content: space-between; padding: 0 10px;">
                        <button id="closeCamera" style="background: red; color: white; border: none; padding: 5px 10px; border-radius: 5px;">Cerrar</button>
                        <button id="switchCamera" style="background: blue; color: white; border: none; padding: 5px 10px; border-radius: 5px;">Cambiar cámara</button>
                    </div>
                </div>
            `;

            document.body.appendChild(overlay);

            const video = document.getElementById('cameraVideo');
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            let currentFacingMode = 'environment';
            let stream = null;

            const startCamera = async (facingMode) => {
                try {
                    if (stream) stream.getTracks().forEach(track => track.stop());
                    stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode } });
                    video.srcObject = stream;
                    video.play();
                    scanQRCode();
                } catch (err) {
                    alert('Error al acceder a la cámara: ' + err.message);
                    document.body.removeChild(overlay);
                }
            };

            const scanQRCode = () => {
                const scan = () => {
                    if (video.readyState === video.HAVE_ENOUGH_DATA) {
                        canvas.width = video.videoWidth;
                        canvas.height = video.videoHeight;
                        context.drawImage(video, 0, 0, canvas.width, canvas.height);
                        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                        const code = jsQR(imageData.data, canvas.width, canvas.height);

                        if (code) {
                            const qrUrl = code.data;
                            let id = qrUrl.includes('/') ? qrUrl.split('/').pop() : qrUrl;
                            id = id.trim();
                            stopCamera();
                            window.location.href = `/vista-seguridad/${id}`;
                            return;
                        }
                        requestAnimationFrame(scan);
                    }
                };
                scan();
            };

            const stopCamera = () => {
                if (stream) stream.getTracks().forEach(track => track.stop());
                document.body.removeChild(overlay);
            };

            startCamera(currentFacingMode);
            document.getElementById('closeCamera').onclick = stopCamera;
            document.getElementById('switchCamera').onclick = () => {
                currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
                startCamera(currentFacingMode);
            };
        }
    </script>
</body>
</html>

<% function getEstadoClass(estado) {
    if (estado.includes('pendiente ingreso')) return 'bg-warning';
    if (estado.includes('vencida')) return 'bg-danger';
    if (estado === 'en labor') return 'bg-info';
    if (estado === 'labor detenida') return 'bg-secondary';
    return 'bg-success';
} %>